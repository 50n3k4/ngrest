#!/bin/bash

if curl --version >/dev/null; then :;
else
    echo "CURL is not installed. Cannot continue" >&2
    exit 1
fi

baseurl=http://localhost:9098/ngrest/test/

# [method ]path[ request body]|expected response
tests=(
  'get|{"result":true}'
  'echoSync?value=test|{"resultValue":"You said test"}'
  'echoASync?value=test|{"result":"You said test"}'
  'add?a=1&b=2|{"result":3}'
  'set?val=true|'
  'notify|'
  'PUT theTest {"arg":{"a":1,"b":"test","testEnum":"Some","n":{"b":true},"ls":["asd","qwe","3"]}}|{"result":{"a":1,"b":"test","testEnum":"Some","n":{"b":true},"ls":["asd","qwe","3"]}}'

  'templListStr?arg=%5B%22a%22%2C%221%22%2C%22test%22%5D|{"result":["a","1","test"]}'
  'templList?arg=%5B1,2,100%5D|{"result":[1,2,100]}'
  'templVector?arg=%5B1,2,100%5D|{"result":[1,2,100]}'
  'templListOfStruct?arg=%5B%5D|{"result":[]}' # empty
   # one element
  'templListOfStruct?arg=%5B%7B%22a%22%3A1%2C%22b%22%3A%22test%22%2C%22testEnum%22%3A%22Some%22%2C%22n%22%3A%7B%22b%22%3Atrue%7D%2C%22ls%22%3A%5B%22asd%22%2C%22qwe%22%2C%223%22%5D%7D%5D|{"result":[{"a":1,"b":"test","testEnum":"Some","n":{"b":true},"ls":["asd","qwe","3"]}]}'
  'templListOfTypedef?arg=%5B%7B%22a%22%3A1%2C%22b%22%3A%22test%22%2C%22testEnum%22%3A%22Some%22%2C%22n%22%3A%7B%22b%22%3Atrue%7D%2C%22ls%22%3A%5B%22asd%22%2C%22qwe%22%2C%223%22%5D%7D%5D|{"result":[{"a":1,"b":"test","testEnum":"Some","n":{"b":true},"ls":["asd","qwe","3"]}]}'


  'templListList?arg=%5B%5B1,3,5%5D%5D|{"result":[[1,3,5]]}'
  'templListListString?arg=%5B%5B%221,3%22,%225%22%5D%5D|{"result":[["1,3","5"]]}'
  'templListListStruct?arg=%5B%5B%7B%22a%22%3A1%2C%22b%22%3A%22test%22%2C%22testEnum%22%3A%22Some%22%2C%22n%22%3A%7B%22b%22%3Atrue%7D%2C%22ls%22%3A%5B%22asd%22%2C%22qwe%22%2C%223%22%5D%7D%5D%5D|{"result":[[{"a":1,"b":"test","testEnum":"Some","n":{"b":true},"ls":["asd","qwe","3"]}]]}'
  'templListListTypedef?arg=%5B%5B%7B%22a%22%3A1%2C%22b%22%3A%22test%22%2C%22testEnum%22%3A%22Some%22%2C%22n%22%3A%7B%22b%22%3Atrue%7D%2C%22ls%22%3A%5B%22asd%22%2C%22qwe%22%2C%223%22%5D%7D%5D%5D|{"result":[[{"a":1,"b":"test","testEnum":"Some","n":{"b":true},"ls":["asd","qwe","3"]}]]}'
  'templListListList?arg=%5B%5B%5B1,3,5%5D%5D%5D|{"result":[[[1,3,5]]]}'

  'templMapInt?arg=%7B%221%22%3A%22one%22%2C%222%22%3A%22two%22%7D|{"result":{"1":"one","2":"two"}}'
  'templMapEnum?arg=%7B%22One%22%3A%22one%22%2C%22Two%22%3A%22two%22%7D|{"result":{"One":"one","Two":"two"}}'
  'templMapStr?arg=%7B%22One%22%3A%22one%22%2C%22Two%22%3A%22two%22%7D|{"result":{"One":"one","Two":"two"}}'
  'templMapStrMapStrStr?arg=%7B%22a%22%3A%7B%22q%22%3A%22w%201%22%2C%22w%22%3A%222%22%7D%7D|{"result":{"a":{"q":"w 1","w":"2"}}}'

  'testTypedef?arg=%7B%22One%22%3A%22one%22%2C%22Two%22%3A%22two%22%7D|{"result":{"One":"one","Two":"two"}}'
  'testEnum?arg=%22One%22|{"result":"One"}'
  'testNestedEnum?arg=%22Values%22|{"result":"Values"}'
  'testNestedStruct?arg=%7B%22b%22%3Atrue%7D|{"result":{"b":true}}'

)

#std::shared_ptr<int> ptrInt(std::shared_ptr<int> arg);
#std::shared_ptr<int> ptrIntConst(const std::shared_ptr<int>& arg);
#std::shared_ptr<std::string> ptrString(std::shared_ptr<std::string> arg);
#std::shared_ptr<ValType> ptrEnum(std::shared_ptr<ValType> arg);
#std::shared_ptr<Test> ptrStruct(std::shared_ptr<Test> arg);
#std::shared_ptr<std::list<Test>> ptrStructList(std::shared_ptr<std::list<Test>> arg);

#TestPtr ptrNull();
#TestPtr ptrNotNull();


passed=0
failed=0
for t in "${tests[@]}"
do
  req="${t%%|*}"
  expect="${t##*|}"
  reqBody=
  if [[ "$req" =~ " " ]]
  then
    method="${req%% *}"
    req="${req#* }"
    if [[ "$req" =~ " " ]]
    then
      reqBody="${req#* }"
      req="${req%% *}"
    fi
  else
    method=GET
  fi
  url="$baseurl$req"
  echo -n "testing $method $url "
  if [ -n "$reqBody" ]
  then
    res=$(curl -s -S -X $method -d @- -H "Content-Type:application/json" "$url" <<< "$reqBody")
  else
    res=$(curl -s -S -X $method "$url")
  fi

  ret=$?
  if [ $ret -ne 0 ]
  then
    echo -e "\e[31;1mFAILED IN INVOKE\e[0m\n"
  else
    if [ "$res" != "$expect" ]
    then
      echo -e "\e[31;1mFAILED\n---- EXPECTED: ----\n$expect\n---- RECEIVED: ----\n$res\n----\n\e[0m\n"
    else
      echo "OK"
    fi
  fi
done

echo
