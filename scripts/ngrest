#!/bin/bash

set -eu

# detect OS
OS=
case $(uname -s) in
  MINGW*)
    OS=MINGW
    ;;
  Linux)
    OS=Linux
    ;;
  *)
    echo "This OS is not yet supported" >&2
    exit 1
esac

if [ $OS = MINGW ]
then
  export NGREST_HOME_SRC=$APPDATA/ngrest/ngrest
else
  export NGREST_HOME_SRC=~/.ngrest/ngrest
fi

export NGREST_HOME=$NGREST_HOME_SRC-build/deploy
export PATH=$PATH:$NGREST_HOME/bin
nl="
"

if [ $OS = MINGW ]
then
  mktemp() {
    n=/tmp/$(date +%Y%m%d%H%M%S)
    mkdir "$n"
    echo "$n"
  }

  fakeroot() {
    $1
  }
fi

help_create() {
  cat >&2 << EOF
Usage: ngrest create [<project_name>] <service_name> [<service_name>...]

Create a new project with one or more services.
Service name may optionally contain package name.


Example 1. Create service calculator which is bound to "/calculator" resource:

  ngrest create calculator


Example 2. Create service calculator which is bound to "/ngrest/example/calculator" resource:

  ngrest create ngrest.example.calculator

Example 3. Create service calculator which is bound to "/ngrest/example/calculator" resource and set project name to "calc":

  ngrest create calc ngrest.example.calculator

EOF
}

help_run() {
  cat >&2 << EOF
Usage: ngrest [run]

Build and run your project in local deployment mode.

Must start in project's dir, i.e. current directory must contain '.ngrest' subdirectory and service(s) subdirectories.

There a set of environment variables to control the build process and the server:

  NGREST_SERVER_PORT       Sets port where server should listen for incoming connections.

  NGREST_LOG_LEVEL         Sets log level. Supported values are:
                              ALERT CRIT ERROR WARNING NOTICE INFO DEBUG VERBOSE TRACE

  NGREST_LOG_VERBOSITY     Sets log verbosity. This variable is a combination of values such as:
                              TEXT LEVEL FILELINE FUNCTION DATETIME DEFAULT ALL

  CMAKE_FLAGS              Sets CMAKE arguments used to build your project.

  MAKE_FLAGS               Sets MAKE arguments used to build your project.


Example 1. Start your project enabling all log messages:

  NGREST_LOG_LEVEL=TRACE NGREST_LOG_VERBOSITY=ALL ngrest

Example 2. Start your project and set server's port to 9090:

  NGREST_SERVER_PORT=9090 ngrest

EOF
}

help_build() {
  cat >&2 << EOF
Usage: ngrest build

Build current project and create service binaries in '.ngrest/local/build/services'.

EOF
}

help_clean() {
  cat >&2 << EOF
Usage: ngrest clean

Clean build and program caches.
Useful when you change CMAKE/MAKE flags or prepairing to create source tarball.

EOF
}

help_upgrade() {
  cat >&2 << EOF
Usage: ngrest upgrade [<commit_hash>]

Upgrades ngrest to the latest available version on github. Upgrades to specific commit if provided.

Example 1. Upgrade to latest available version:

  ngrest upgrade

Example 2. Upgrade to commit 2092ea0...:

  ngrest upgrade 2092ea0

EOF
}

help_bundle_server() {
  cat >&2 << EOF
Usage: ngrest bundle-server [<archive_name_noext>]

Create ngrest server bundle to install it to another host.
Uses 'archive_name_noext' as filename for output archive.

EOF
}

help_deploy_server() {
  cat >&2 << EOF
Usage: ngrest deploy-server [user@]host [path]

Install local version of ngrest server to remote host.
By default path = /opt. This will deploy ngrest server into /opt/ngrest

Note: Before deploying you must make parent directory writable (sudo chmod 777 /opt)
    or create path with writable permission:
      sudo mkdir /opt/ngrest
      sudo chown user:user /opt/ngrest

Example:

  ngrest deploy-server 192.168.0.1

EOF
}

help_bundle() {
  cat >&2 << EOF
Usage: ngrest bundle [<archive_name_noext>]

Create bundle of the current project to install it to another host.
Uses 'archive_name_noext' as filename for output archive.

EOF
}

help_deploy() {
  cat >&2 << EOF
Usage: ngrest deploy [user@]host [server_path]

Deploy local version of the current project to remote host.
ngrest server must be installed on server_path.
By default server_path = /opt/ngrest.

Example:

  ngrest deploy 192.168.0.1

EOF
}


help() {
  case "${1:-}" in
  create)
    help_create
    ;;

  run)
    help_run
    ;;

  build)
    help_build
    ;;

  clean)
    help_clean
    ;;

  bundle-server)
    help_bundle_server
    ;;

  deploy-server)
    help_deploy_server
    ;;

  bundle)
    help_bundle
    ;;

  deploy)
    help_deploy
    ;;

  upgrade)
    help_upgrade
    ;;

  *)
    cat >&2 << EOF
Usage: ngrest [help] [<command>] [<arguments>]

Commands:
  create         Create a new project.
  run            (default) Build and run current project in local deployment mode.
  build          Build current project.
  clean          Clean build and program cache.
  upgrade        Upgrade ngrest to the latest available version.
  bundle-server  Create ngrest server bundle to install it to another machine.
  deploy-server  Deploy local version of ngrest server to remote host.
  bundle         Create bundle of the current project to install it to another host.
  deploy         Deploy local version of the current project to remote host.
  help           Display help for the command.

EOF
    ;;
  esac
}

create() {
  if [ -z "$1" ]
  then
    echo "Project name omitted" >&2
    help_create
    exit 1
  fi

  if [ -z "${2:-}" ]
  then
    # generate project name from service name
    SERVICE_NAME=${1:-}
    PROJECT_NAME=${SERVICE_NAME##*\.}
    # bash 3.1 compat
    PROJECT_NAME=$(tr '[:upper:]' '[:lower:]' <<< "$PROJECT_NAME")
    shift
  else
    PROJECT_NAME=${1:-}
    SERVICE_NAME=${2:-}
    shift
    shift
  fi

  if [ -z "$PROJECT_NAME" ]
  then
    echo "Project name cannot be empty" >&2
    help_create
    exit 1
  fi

  if [ -d "$PROJECT_NAME" ]
  then
    echo "Failed to create project [$PROJECT_NAME]: Another directory with the same name is already exist in current directory" >&2
    exit 1
  fi

  if [ -z "$SERVICE_NAME" ]
  then
    echo "Service name cannot be empty" >&2
    help_create
    exit 1
  fi

  SERVICES=

  while [ -n "$SERVICE_NAME" ]
  do
    # bash 3.1 compat
    TEST_NAME=$(sed '/^\([a-z][a-z0-9_]*\.\)*[a-zA-Z]\([a-zA-Z_0-9]*\)$/!d' <<< "$SERVICE_NAME")
    if [ -z "$TEST_NAME" ]
    then
      echo "Invalid service name: [$SERVICE_NAME]" >&2
      echo "Service name must only contain digits, letters, underscore and dot symbol and must start with a letter" >&2
      help_create
      exit 1
    fi

    SERVICES+="$SERVICE_NAME "

    SERVICE_NAME=${1:-}
    [ -n "$SERVICE_NAME" ] && shift
  done
  SERVICES=${SERVICES% }

  echo "Creating project [$PROJECT_NAME] with services [$SERVICES]..."
  mkdir "$PROJECT_NAME" || (
    echo "Failed to create directory for project [$PROJECT_NAME]" >&2
    exit 1
  )
  cd "$PROJECT_NAME"
  mkdir -p .ngrest/local
  ngrestcg -t project -n "$PROJECT_NAME" -d services="$SERVICES" >.ngrest/local/codegen.log || (
    echo "Failed to create project [$PROJECT_NAME] with services [$SERVICES]" >&2
    cat .ngrest/local/codegen.log
    cd -
    rm -rf "$PROJECT_NAME" 2>/dev/null
    exit 1
  )

  echo "$PROJECT_NAME" >.ngrest/name
  echo "${SERVICES// /$nl}" >.ngrest/services
  cat >.gitignore <<EOF
.ngrest/local
EOF

  cat <<EOF


Your new project [$PROJECT_NAME] has been created.

You can start it by typing from "$PROJECT_NAME" directory:

  ngrest

EOF
}

build() {
  PROJECT_DIR=$PWD
  mkdir -p .ngrest/local/build
  cd .ngrest/local/build

  [ -e .ngrest_version ] && BUILT_WITH_VERSION=$(<.ngrest_version) || BUILT_WITH_VERSION=
  CURRENT_VERSION=$(git -C "$NGREST_HOME_SRC" rev-parse HEAD)
  if [ "$BUILT_WITH_VERSION" != "$CURRENT_VERSION" -a -n "$BUILT_WITH_VERSION" ]
  then
    echo "Cleaning build $(<$PROJECT_DIR/.ngrest/name) due to ngrest upgrade..."
    rm -rf ../build/* # be sure to do not remove something wrong
  fi

  echo "Building project $(<$PROJECT_DIR/.ngrest/name)..."
  CMAKE_FLAGS=${CMAKE_FLAGS:-'-DCMAKE_BUILD_TYPE=DEBUG'}

  if [ $OS = MINGW ]
  then
    OLDPATH=$PATH
    # CMAKE don't like to find sh.exe in path, removing it from path
    PATH="${PATH//\/usr\/bin/}"
    PATH="${PATH//\/c\/Program Files*\/Git\/bin}"
    export PATH
    cmake -G'MinGW Makefiles' "${CMAKE_FLAGS:-}" "$PROJECT_DIR" >cmake.log || return $?
    MAKE=$(PATH="$OLDPATH" sed -n '/CMAKE_MAKE_PROGRAM:FILEPATH/s/.*=//p' CMakeCache.txt)
  else
    cmake $CMAKE_FLAGS $PROJECT_DIR >cmake.log || return $?
    MAKE=make
  fi

  $MAKE ${MAKE_FLAGS:-} >make.log || return $?
  [ $OS != MINGW ] || PATH="$OLDPATH"
  mkdir -p services
  rm -f services/*
  cp $PWD/deploy/share/ngrest/services/* services/

  [ "$BUILT_WITH_VERSION" = "$CURRENT_VERSION" ] || echo "$CURRENT_VERSION" > .ngrest_version
  echo "build finished."
}

color() {
  [ -n "${NO_LOG_COLOR:-}" ] || echo -en "\e[$1m"
}

start_server() {
  CODE=0
  rm -f core*
  ulimit -c unlimited 2>/dev/null || true
  ngrestserver -p $PORT -s $PWD/services || CODE=$?
  if [ $CODE -eq 139 ]
  then
    CORE=$(find core* -type f -name 'core*' 2>/dev/null || true)
    if [ -n "$CORE" ]
    then
      color "33"
      echo -e "\n===== CORE DUMP ==========================================================="
      gdb -batch -q -ex "bt" $NGREST_HOME/bin/ngrestserver -core $CORE 2>/dev/null | (
        if [ -n "${NO_LOG_COLOR:-}" ]
        then
          cat
        else
          # highlight crash location
          sed "$(echo -e '/^[ \t]*#0.*$/{N;s/^.*$/\e[4;1m&\e[22;24m/;N;:p;N;$!bp}')"
        fi
      ) || true
      echo -e "===== END OF CORE DUMP ====================================================\n"
      color "0"
    fi
    color "31;1"
    echo "Server crashed. Waiting for project modifications..." >&2
    color "0"
  fi
}

stop_server() {
  SERVER_PID=$(ps --no-headers --ppid $NGREST_SERVER_WATCHER_PID -o pid,comm |\
         sed -n '/ ngrestserver/{s/^[ ]*\([0-9]\+\) .*/\1/;p}')
  if [ -z "$SERVER_PID" ]
  then
    CORE=$(find core* -type f -name 'core*' 2>/dev/null || true)
    [ -n "$CORE" ] || echo "Cannot find server's PID." >&2
    return
  fi

  if [ -n "$SERVER_PID" ]
  then
    kill -INT $SERVER_PID
    sleep 1
    COUNT=10
    while :
    do
      if kill -0 $SERVER_PID 2>/dev/null
      then :; else
        FINISHED=1
        break
      fi

      ((--COUNT))
      if [ $COUNT -eq 0 ]
      then
        kill -KILL $SERVER_PID
        sleep .5
        break
      fi
      sleep .5
    done
  fi
}

restart_on_upgrade() {
  echo "Restarting the project due to ngrest upgrade..."
  UPGRADE_RESTART=1
  CHILDREN=$(ps --no-headers --ppid $$ -o pid)
  stop_server
  kill -TERM $CHILDREN 2>/dev/null || true
}

check_get_name() {
  if [ ! -e .ngrest/name ]
  then
    cat >&2 << EOF
run: No ngrest projects found in current directory.

To create a new ngrest project:
  ngrest create <project_name>

For more help, see "ngrest help".
EOF
    exit 1
  fi
  NAME=$(<.ngrest/name)
}

run() {
  check_get_name

  if [ -z "${NO_LOG_COLOR:-}" ]
  then
    export NGREST_LOG_COLOR=1
  fi

  PORT=${NGREST_SERVER_PORT:-9098}

  build

  echo -e "\nTo test your services try ngrest service tester:"
  while read SERVICE
  do
    echo -n "  "
    color "34;4;1"
    echo "http://localhost:$PORT/ngrest/service/$SERVICE"
    color "0"
  done < $PROJECT_DIR/.ngrest/services

  if [ -z "${NGREST_LOG_VERBOSITY:-}" ]
  then
    export NGREST_LOG_VERBOSITY="LEVEL DATETIME TEXT"
  fi

  if [ $OS = MINGW ]
  then
    DISABLE_WATCHER=1
  fi

  if [ -z "${DISABLE_WATCHER:-}" ]
  then
    # test if inotifywait is installed
    RES=0
    inotifywait -h >/dev/null 2>&1 || RES=$?
    if [ $RES -eq 127 ] # command not found
    then
      DISABLE_WATCHER=1
      color "33"
      echo "Cannot find inotifywait. Starting your project without file watcher support." >&2
      echo "Please install inotify-tools package or to suppress this warning:" >&2
      echo "  DISABLE_WATCHER=1 ngrest" >&2
      color "0"
    fi
  fi

  echo -e "\nStarting your project in local deployment mode..."
  echo -e "Press [Ctrl+C] to stop your project\n"
  if [ -n "${DISABLE_WATCHER:-}" ]
  then
    start_server
  else
    color "32"
    echo -e "Watching your project for modifications...\n"
    color "0"

    WAIT_FILES=${WAIT_FILES:-'(.*\.(c|cpp|h|hpp)|CMakeLists.txt)$'}
    EXCLUDE_WAIT_FILES=${EXCLUDE_WAIT_FILES:-'.*/\..*$'}

    start_server &
    NGREST_SERVER_WATCHER_PID=$!

    trap restart_on_upgrade HUP

    # watcher
    while :
    do
      UPGRADE_RESTART=
      RES=0
      FILE=$(inotifywait -q -e close_write -r "$PROJECT_DIR" --format "%w%f") || RES=$?
      case $RES in
        127) # command not found
          echo "Cannot find inotifywait. Please install it or start ngrest without watcher:" >&2
          echo "  DISABLE_WATCHER=1 ngrest" >&2
          exit 1
          ;;
        130) #Ctr+C
          exit 130
          ;;
      esac

      if [ -z "${UPGRADE_RESTART:-}" ]
      then
        sleep 1
        [[ "$FILE" =~ $WAIT_FILES ]] || continue
        [[ ! "$FILE" =~ $EXCLUDE_WAIT_FILES ]] || continue

        echo "Project files changed."
      fi

      if build
      then :; else
        echo "Build failed. Waiting for project modifications..."
        echo "(Server is still running with last successful build)"
        continue
      fi

      echo "Build successful. Restarting the server..."
      stop_server
      start_server &
      NGREST_SERVER_WATCHER_PID=$!
    done

  fi
}

upgrade() {
  echo "Checking for upgrades..."
  cd "$NGREST_HOME_SRC"

  LAST_VERSION=$(git rev-parse HEAD)
  [ -n "${1:-}" ] || git checkout master >/dev/null
  RES=$(LANG=C git pull >/dev/null)
  [ -z "${1:-}" ] || RES=$(git checkout $1 >/dev/null)
  CURRENT_VERSION=$(git rev-parse HEAD)

  if [ "$CURRENT_VERSION" = "$LAST_VERSION" -a -e $NGREST_HOME/../.build_ok ]
  then
    echo "No upgrades found"
  else
    # reading script into memory to prevent upgrade errors
    # caused by script is changed on execution
    INST_SCRIPT=$(<"$NGREST_HOME_SRC/scripts/inst")
    UPGRADE=1 bash <<< "$INST_SCRIPT"
  fi
}

check_not_mingw() {
  if [ $OS = MINGW ]
  then
    echo "This command not supported under MinGW. Sorry." >&2
    exit 1
  fi
}

bundle_server() {
  check_not_mingw
  CURRENT_VERSION=$(git -C "$NGREST_HOME_SRC" rev-parse --short HEAD)
  OUT_FILE_BASE=${1:-$PWD/ngrest-server-bundle-$CURRENT_VERSION}
  [ "${OUT_FILE_BASE::1}" == "/" ] || OUT_FILE_BASE=$PWD/$OUT_FILE_BASE
  TMP_DIR=$(mktemp -d)
  trap "rm -rf $TMP_DIR" EXIT
  fakeroot bash << EOD
set -eu
mkdir $TMP_DIR/ngrest
echo "performing ngrest server bundle..."
cp -r $HOME/.ngrest/ngrest-build/deploy/{bin,lib,share} $TMP_DIR/ngrest
chown -R 0:0 $TMP_DIR/ngrest
mv $TMP_DIR/ngrest/bin/ngrestserver $TMP_DIR/ngrest/bin/ngrestserver-bin
echo -e '#!/bin/bash\n\ncd \$(dirname \$0)\nexport LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$PWD/../lib\nexec ./ngrestserver-bin \$@' >$TMP_DIR/ngrest/bin/ngrestserver
chmod 755 $TMP_DIR/ngrest/bin/ngrestserver
rm -rf $TMP_DIR/ngrest/bin/ngrestcg $TMP_DIR/ngrest/lib/libngrestcgparser.so $TMP_DIR/ngrest/share/ngrest/codegen
rm -f $TMP_DIR/ngrest/share/ngrest/services/{crudservice.so,echoservice.so,ngresttestservice.so}
[ -n "${NOSTRIP:-}" ] || strip --strip-unneeded $TMP_DIR/ngrest/bin/ngrestserver-bin $TMP_DIR/ngrest/lib/*.so $TMP_DIR/ngrest/share/ngrest/services/*.so || true
echo $CURRENT_VERSION >$TMP_DIR/ngrest/VERSION
cp $HOME/.ngrest/ngrest/LICENSE $TMP_DIR/ngrest/
cd $TMP_DIR
tar Jc ngrest >ngrest.tar.xz
cd - >/dev/null
mv $TMP_DIR/ngrest.tar.xz $OUT_FILE_BASE.tar.xz
[ -n "${QUIET:-}" ] || cat << EEE

Created $OUT_FILE_BASE.tar.xz

You can install it using:
  tar Jxf ${OUT_FILE_BASE##*/}.tar.xz -C/opt

To start ngrest server:
  /opt/ngrest/bin/ngrestserver
EEE
EOD
  rm -rf $TMP_DIR
  trap "" EXIT
}

deploy_server() {
  check_not_mingw
  SERVER=${1:-}
  SERVER_PATH=${2:-/opt}
  if [ -z "$SERVER" ]
  then
    echo "host parameter is missing" >&2
    help_deploy_server
    exit 1
  fi

  TMP_DEPLOY_DIR=$(mktemp -d)
  cd $TMP_DEPLOY_DIR
  QUIET=1 bundle_server
  BUNDLE=$OUT_FILE_BASE.tar.xz
  BUNDLE_CONTENTS=$(base64 -w0 $BUNDLE)

  echo "connecting to $SERVER..."
  ssh -qt $SERVER /bin/bash << EOF
set -eu
echo "Deploying..."
TMP_DIR=\$(mktemp -d)
cd \$TMP_DIR
base64 -d <<< "$BUNDLE_CONTENTS" | tar Jx -C $SERVER_PATH
echo "deploy completed"
EOF
  rm -rf $TMP_DEPLOY_DIR
}

bundle() {
  check_not_mingw
  check_get_name
  NGREST_VERSION=$(git -C "$NGREST_HOME_SRC" rev-parse --short HEAD)
  OUT_FILE_BASE=${1:-$PWD/$NAME-ngrest-$NGREST_VERSION}
  [ "${OUT_FILE_BASE::1}" == "/" ] || OUT_FILE_BASE=$PWD/$OUT_FILE_BASE

  TMP_DIR=$(mktemp -d)
  trap "rm -rf $TMP_DIR" EXIT

  echo "performing $NAME bundle..."
  fakeroot bash << EOD
set -eu

cp -Rf .ngrest/local/build/deploy/* $TMP_DIR
chown -R 0:0 $TMP_DIR
cd $TMP_DIR
[ -n "${NOSTRIP:-}" ] || strip --strip-unneeded share/ngrest/services/*.so || true
tar Jc share > $OUT_FILE_BASE.tar.xz
cd - >/dev/null
[ -n "${QUIET:-}" ] || cat << EEE

Created $OUT_FILE_BASE.tar.xz

You can install it using:
  tar Jxf ${OUT_FILE_BASE##*/}.tar.xz -C/opt/ngrest/
EEE
EOD
  trap "" EXIT
  rm -r $TMP_DIR
}

deploy() {
  check_not_mingw
  SERVER=${1:-}
  SERVER_PATH=${2:-/opt/ngrest}
  if [ -z "$SERVER" ]
  then
    echo "host parameter is missing" >&2
    help_deploy
    exit 1
  fi

  TMP_DEPLOY_DIR=$(mktemp -d)
  QUIET=1 bundle $TMP_DEPLOY_DIR/deploy-ngrest-project
  cd $TMP_DEPLOY_DIR
  BUNDLE=$OUT_FILE_BASE.tar.xz
  BUNDLE_CONTENTS=$(base64 -w0 $BUNDLE)

  echo "connecting to $SERVER..."
  ssh -qt $SERVER /bin/bash << EOF
set -eu
echo "Deploying..."
TMP_DIR=\$(mktemp -d)
cd \$TMP_DIR
INSTALLED_VERSION=\$(<$SERVER_PATH/VERSION)
[ "$NGREST_VERSION" == "\$INSTALLED_VERSION" ] || \
    echo -e "\e[33;1mWARNING: Server version mismatch! $NGREST_VERSION != \$INSTALLED_VERSION" >&2
base64 -d <<< "$BUNDLE_CONTENTS" | tar Jx -C $SERVER_PATH
echo "deploy completed"
EOF
  rm -rf $TMP_DEPLOY_DIR
}

COMMAND=${1:-}
shift || true

trap : HUP

case $COMMAND in
  create)
    create $@
    ;;

  help)
    help $@
    ;;

  build)
    build
    ;;

  run)
    run
    ;;

  clean)
    rm -rf .ngrest/local/*
    ;;

  upgrade)
    upgrade
    ;;

  bundle-server)
    bundle_server $@
    ;;

  deploy-server)
    deploy_server $@
    ;;

  bundle)
    bundle $@
    ;;

  deploy)
    deploy $@
    ;;

  "")
    run
    ;;

  *)
    help
    ;;
esac
