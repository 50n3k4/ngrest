#!/bin/bash

set -eu

export NGREST_HOME=~/.ngrest/ngrest-build/deploy
export PATH=$PATH:$NGREST_HOME/bin
nl="
"

help_create() {
  cat >&2 << EOF
Usage: ngrest create [<project_name>] <service_name> [<service_name>...]

Create a new project with one or more services.
Service name may optionally contain package name.


Example 1. Create service calculator which is bound to "/calculator" resource:

  ngrest create calculator


Example 2. Create service calculator which is bound to "/ngrest/example/calculator" resource:

  ngrest create ngrest.example.calculator

Example 3. Create service calculator which is bound to "/ngrest/example/calculator" resource and set project name to "calc":

  ngrest create calc ngrest.example.calculator

EOF
}

help_run() {
  cat >&2 << EOF
Usage: ngrest [run]

Build and run your project in local deployment mode.

Must start in project's dir, i.e. current directory must contain '.ngrest' subdirectory and service(s) subdirectories.

There a set of environment variables to control the build process and the server:

  NGREST_SERVER_PORT       Sets port where server should listen for incoming connections.

  NGREST_LOG_LEVEL         Sets log level. Supported values are:
                              ALERT CRIT ERROR WARNING NOTICE INFO DEBUG VERBOSE TRACE

  NGREST_LOG_VERBOSITY     Sets log verbosity. This variable is a combination of values such as:
                              TEXT LEVEL FILELINE FUNCTION DATETIME DEFAULT ALL

  CMAKE_FLAGS              Sets CMAKE arguments used to build your project.

  MAKE_FLAGS               Sets MAKE arguments used to build your project.


Example 1. Start your project enabling all log messages:

  NGREST_LOG_LEVEL=TRACE NGREST_LOG_VERBOSITY=ALL ngrest

Example 2. Start your project and set server's port to 9090:

  NGREST_SERVER_PORT=9090 ngrest

EOF
}

help_clean() {
  cat >&2 << EOF
Usage: ngrest clean

Cleans build and program caches. Useful when you change CMAKE/MAKE flags

EOF
}

help_upgrade() {
  cat >&2 << EOF
Usage: ngrest upgrade [<commit_hash>]

Upgrades ngrest to the latest available version on github. Upgrades to specific commit if provided.

Example 1. Upgrade to latest available version:

  ngrest upgrade

Example 2. Upgrade to commit 2092ea0...:

  ngrest upgrade 2092ea0

EOF
}

help() {
  case "${1:-}" in
  create)
    help_create
    ;;

  run)
    help_run
    ;;

  clean)
    help_clean
    ;;

  upgrade)
    help_upgrade
    ;;

  *)
    cat >&2 << EOF
Usage: ngrest [help] [<command>] [<arguments>]

Commands:
  create         Create a new project.
  run            (default) Run current project in local deployment mode.
  clean          Cleans build and program cache.
  upgrade        Upgrade ngrest to the latest available version.
  help           Display help for the command.

EOF
    ;;
  esac
}

create() {
  if [ -z "$1" ]
  then
    echo "Project name omitted" >&2
    help_create
    exit 1
  fi

  if [ -z "${2:-}" ]
  then
    # generate project name from service name
    SERVICE_NAME=${1:-}
    PROJECT_NAME=${SERVICE_NAME##*\.}
    PROJECT_NAME=${PROJECT_NAME,,}
    shift
  else
    PROJECT_NAME=${1:-}
    SERVICE_NAME=${2:-}
    shift
    shift
  fi

  if [ -z "$PROJECT_NAME" ]
  then
    echo "Project name cannot be empty" >&2
    help_create
    exit 1
  fi

  if [ -d "$PROJECT_NAME" ]
  then
    echo "Failed to create project [$PROJECT_NAME]: Another directory with the same name is already exist in current directory" >&2
    exit 1
  fi

  if [ -z "$SERVICE_NAME" ]
  then
    echo "Service name cannot be empty" >&2
    help_create
    exit 1
  fi

  SERVICES=

  while [ -n "$SERVICE_NAME" ]
  do
    if [[ ! "$SERVICE_NAME" =~ ^([a-z][a-z0-9_]*\.)*[a-zA-Z]([a-zA-Z_0-9]*)$ ]]
    then
      echo "Invalid service name: [$SERVICE_NAME]" >&2
      echo "Service name must only contain digits, letters, underscore and dot symbol and must start with a letter" >&2
      help_create
      exit 1
    fi

    SERVICES+="$SERVICE_NAME "

    SERVICE_NAME=${1:-}
    [ -n "$SERVICE_NAME" ] && shift
  done
  SERVICES=${SERVICES% }

  echo "Creating project [$PROJECT_NAME] with services [$SERVICES]..."
  mkdir "$PROJECT_NAME" || (
    echo "Failed to create directory for project [$PROJECT_NAME]" >&2
    exit 1
  )
  cd "$PROJECT_NAME"
  mkdir -p .ngrest/local
  ngrestcg -t project -n "$PROJECT_NAME" -d services="$SERVICES" >.ngrest/local/codegen.log || (
    echo "Failed to create project [$PROJECT_NAME] with services [$SERVICES]" >&2
    cat .ngrest/local/codegen.log
    cd -
    rm -rf "$PROJECT_NAME" 2>/dev/null
    exit 1
  )

  echo "$PROJECT_NAME" >.ngrest/name
  echo "${SERVICES// /$nl}" >.ngrest/services
  cat >.gitignore <<EOF
.ngrest/local
EOF

  cat <<EOF


Your new project [$PROJECT_NAME] has been created.

You can start it by typing from "$PROJECT_NAME" directory:

  ngrest

EOF
}

build() {
  [ -e .ngrest_version ] && BUILT_WITH_VERSION=$(<.ngrest_version) || BUILT_WITH_VERSION=
  CURRENT_VERSION=$(git -C ~/.ngrest/ngrest rev-parse HEAD)
  if [ "$BUILT_WITH_VERSION" != "$CURRENT_VERSION" -a -n "$BUILT_WITH_VERSION" ]
  then
    echo "Cleaning build $(<$PROJECT_DIR/.ngrest/name) due to ngrest upgrade..."
    rm -rf ../build/* # be sure to do not remove something wrong
  fi

  echo "Building project $(<$PROJECT_DIR/.ngrest/name)..."
  CMAKE_FLAGS=${CMAKE_FLAGS:-'-DCMAKE_BUILD_TYPE=DEBUG'}
  cmake $CMAKE_FLAGS $PROJECT_DIR >cmake.log || return $?
  make ${MAKE_FLAGS:-} >make.log || return $?
  mkdir -p services
  rm -f services/*
  cp $PWD/deploy/share/ngrest/services/* services/

  [ "$BUILT_WITH_VERSION" = "$CURRENT_VERSION" ] || echo "$CURRENT_VERSION" > .ngrest_version
}

color() {
  [ -n "${NO_LOG_COLOR:-}" ] || echo -en "\e[$1m"
}

start_server() {
  CODE=0
  rm -f core*
  ulimit -c unlimited 2>/dev/null || true
  ngrestserver -p $PORT -s $PWD/services || CODE=$?
  if [ $CODE -eq 139 ]
  then
    CORE=$(find core* -type f -name 'core*' 2>/dev/null || true)
    if [ -n "$CORE" ]
    then
      color "33"
      echo -e "\n===== CORE DUMP ==========================================================="
      gdb -batch -q -ex "bt" $NGREST_HOME/bin/ngrestserver -core $CORE 2>/dev/null | (
        if [ -n "${NO_LOG_COLOR:-}" ]
        then
          cat
        else
          # highlight crash location
          sed "$(echo -e '/^[ \t]*#0.*$/{N;s/^.*$/\e[4;1m&\e[22;24m/;N;:p;N;$!bp}')"
        fi
      ) || true
      echo -e "===== END OF CORE DUMP ====================================================\n"
      color "0"
    fi
    color "31;1"
    echo "Server crashed. Waiting for project modifications..." >&2
    color "0"
  fi
}

stop_server() {
  SERVER_PID=$(ps --no-headers --ppid $NGREST_SERVER_WATCHER_PID -o pid,comm |\
         sed -n '/ ngrestserver/{s/^[ ]*\([0-9]\+\) .*/\1/;p}')
  if [ -z "$SERVER_PID" ]
  then
    CORE=$(find core* -type f -name 'core*' 2>/dev/null || true)
    [ -n "$CORE" ] || echo "Cannot find server's PID." >&2
    return
  fi

  if [ -n "$SERVER_PID" ]
  then
    kill -INT $SERVER_PID
    sleep 1
    COUNT=10
    while :
    do
      if kill -0 $SERVER_PID 2>/dev/null
      then :; else
        FINISHED=1
        break
      fi

      ((--COUNT))
      if [ $COUNT -eq 0 ]
      then
        kill -KILL $SERVER_PID
        sleep .5
        break
      fi
      sleep .5
    done
  fi
}

restart_on_upgrade() {
  echo "Restarting the project due to ngrest upgrade..."
  UPGRADE_RESTART=1
  CHILDREN=$(ps --no-headers --ppid $$ -o pid)
  stop_server
  kill -TERM $CHILDREN 2>/dev/null || true
}

run() {
  if [ ! -e .ngrest/name ]
  then
    cat >&2 << EOF
run: No ngrest projects found in current directory.

To create a new ngrest project:
  ngrest create <project_name>

For more help, see "ngrest help".
EOF
    exit 1
  fi

  if [ -z "${NO_LOG_COLOR:-}" ]
  then
    export NGREST_LOG_COLOR=1
  fi

  PORT=${NGREST_SERVER_PORT:-9098}
  PROJECT_DIR=$PWD
  mkdir -p .ngrest/local/build
  cd .ngrest/local/build

  build

  echo -e "\nTo test your services try ngrest service tester:"
  while read SERVICE
  do
    echo -n "  "
    color "34;4;1"
    echo "http://localhost:$PORT/ngrest/service/$SERVICE"
    color "0"
  done < $PROJECT_DIR/.ngrest/services

  if [ -z "${NGREST_LOG_VERBOSITY:-}" ]
  then
    export NGREST_LOG_VERBOSITY="LEVEL DATETIME TEXT"
  fi

  if [ -z "${DISABLE_WATCHER:-}" ]
  then
    # test if inotifywait is installed
    RES=0
    inotifywait -h >/dev/null 2>&1 || RES=$?
    if [ $RES -eq 127 ] # command not found
    then
      DISABLE_WATCHER=1
      color "33"
      echo "Cannot find inotifywait. Starting your project without file watcher support." >&2
      echo "Please install inotify-tools package or to suppress this warning:" >&2
      echo "  DISABLE_WATCHER=1 ngrest" >&2
      color "0"
    fi
  fi

  echo -e "\nStarting your project in local deployment mode..."
  echo -e "Press [Ctrl+C] to stop your project\n"
  if [ -n "${DISABLE_WATCHER:-}" ]
  then
    start_server
  else
    color "32"
    echo -e "Watching your project for modifications...\n"
    color "0"

    WAIT_FILES=${WAIT_FILES:-'(.*\.(c|cpp|h|hpp)|CMakeLists.txt)$'}
    EXCLUDE_WAIT_FILES=${EXCLUDE_WAIT_FILES:-'.*/\..*$'}

    start_server &
    NGREST_SERVER_WATCHER_PID=$!

    trap restart_on_upgrade HUP

    # watcher
    while :
    do
      UPGRADE_RESTART=
      RES=0
      FILE=$(inotifywait -q -e close_write -r "$PROJECT_DIR" --format "%w%f") || RES=$?
      case $RES in
        127) # command not found
          echo "Cannot find inotifywait. Please install it or start ngrest without watcher:" >&2
          echo "  DISABLE_WATCHER=1 ngrest" >&2
          exit 1
          ;;
        130) #Ctr+C
          exit 130
          ;;
      esac

      if [ -z "${UPGRADE_RESTART:-}" ]
      then
        sleep 1
        [[ "$FILE" =~ $WAIT_FILES ]] || continue
        [[ ! "$FILE" =~ $EXCLUDE_WAIT_FILES ]] || continue

        echo "Project files changed."
      fi

      if build
      then :; else
        echo "Build failed. Waiting for project modifications..."
        echo "(Server is still running with last successful build)"
        continue
      fi

      echo "Build successful. Restarting the server..."
      stop_server
      start_server &
      NGREST_SERVER_WATCHER_PID=$!
    done

  fi
}

upgrade() {
  echo "Checking for upgrades..."
  cd ~/.ngrest/ngrest

  LAST_VERSION=$(git rev-parse HEAD)
  [ -n "${1:-}" ] || git checkout master >/dev/null
  RES=$(LANG=C git pull >/dev/null)
  [ -z "${1:-}" ] || RES=$(git checkout $1 >/dev/null)
  CURRENT_VERSION=$(git rev-parse HEAD)

  if [ "$CURRENT_VERSION" = "$LAST_VERSION" -a -e $NGREST_HOME/../.build_ok ]
  then
    echo "No upgrades found"
  else
    # reading script into memory to prevent upgrade errors
    # caused by script is changed on execution
    INST_SCRIPT=$(<~/.ngrest/ngrest/scripts/inst)
    UPGRADE=1 bash <<< "$INST_SCRIPT"
  fi
}

COMMAND=${1:-}
shift || true

trap : HUP

case $COMMAND in
  create)
    create $@
    ;;

  help)
    help $@
    ;;

  run)
    run
    ;;

  clean)
    rm -rf .ngrest/local/*
    ;;

  upgrade)
    upgrade
    ;;

  "")
    run
    ;;
esac
